import streamlit as st
import pandas as pd
from sklearn.datasets import load_iris
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report

# Load iris dataset
iris = load_iris()
X = pd.DataFrame(iris.data, columns=iris.feature_names)
y = pd.Series(iris.target, name='species')

# Train test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Model training
clf = RandomForestClassifier(n_estimators=100, random_state=42)
clf.fit(X_train, y_train)

# Streamlit app
st.title('Iris Flower Classification')
st.write("""
This app predicts the species of iris flowers using a Random Forest classifier.
""")

# Sidebar
st.sidebar.header('Input Parameters')

def user_input_features():
    sepal_length = st.sidebar.slider('Sepal length', float(X['sepal length (cm)'].min()), float(X['sepal length (cm)'].max()), float(X['sepal length (cm)'].mean()))
    sepal_width = st.sidebar.slider('Sepal width', float(X['sepal width (cm)'].min()), float(X['sepal width (cm)'].max()), float(X['sepal width (cm)'].mean()))
    petal_length = st.sidebar.slider('Petal length', float(X['petal length (cm)'].min()), float(X['petal length (cm)'].max()), float(X['petal length (cm)'].mean()))
    petal_width = st.sidebar.slider('Petal width', float(X['petal width (cm)'].min()), float(X['petal width (cm)'].max()), float(X['petal width (cm)'].mean()))
    data = {'sepal length (cm)': sepal_length,
            'sepal width (cm)': sepal_width,
            'petal length (cm)': petal_length,
            'petal width (cm)': petal_width}
    features = pd.DataFrame(data, index=[0])
    return features

input_df = user_input_features()

# Display user input
st.subheader('User Input:')
st.write(input_df)

# Make predictions
prediction = clf.predict(input_df)
prediction_proba = clf.predict_proba(input_df)

# Display prediction
st.subheader('Prediction:')
st.write(iris.target_names[prediction][0])

# Display prediction probabilities
st.subheader('Prediction Probabilities:')
st.write(pd.DataFrame(prediction_proba, columns=iris.target_names))

# Model evaluation
st.subheader('Model Evaluation:')
st.write('Accuracy Score:', accuracy_score(y_test, clf.predict(X_test)))
st.write('Classification Report:')
st.write(classification_report(y_test, clf.predict(X_test), target_names=iris.target_names))

